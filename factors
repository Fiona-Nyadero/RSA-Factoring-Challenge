#!/usr/bin/python3

import sys
import time
import signal
import logging


logging.basicConfig(level=logging.ERROR)


def factorize_number(number):
    """Factorizes numbers into a product of two numbers"""
    factors = None
    for divisor in range(2, number):
        if number % divisor == 0:
            factors = (divisor, number // divisor)
            break
    return factors


def read_input_file(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
        return [int(line.strip()) for line in lines]
    except FileNotFoundError:
        logging.error("File not found")
        sys.exit(1)
    except ValueError:
        logging.error("Invalid input file format. Valid natural numbers only.")
        sys.exit(1)


def timeout_error_handler(signum, frame):
    logging.error("Time limit exceeded")
    sys.exit(2)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        logging.error("Usage: factors <file>")
        sys.exit(1)

    input_file_path = sys.argv[1]
    numbers_to_factorize = read_input_file(input_file_path)

    start_time = time.time()

    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = list(executor.map(factorize_number, numbers_to_factorize))
    elapsed_time = time.time() - start_time

    for number, factors in zip(numbers_to_factorize, results):
        if factors:
            print(f"{number}={factors[0]}*{factors[1]}")

    sys.exit(0)
